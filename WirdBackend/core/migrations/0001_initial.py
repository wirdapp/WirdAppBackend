# Generated by Django 5.0.2 on 2025-04-26 12:45

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
import re
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contest_id', models.CharField(default='', max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(6)])),
                ('name', models.CharField(default='', max_length=128, validators=[django.core.validators.MinLengthValidator(4)])),
                ('description', models.CharField(blank=True, max_length=500)),
                ('country', models.CharField(default='', max_length=128)),
                ('show_standings', models.BooleanField(default=True)),
                ('announcements', models.JSONField(default=dict)),
                ('readonly_mode', models.BooleanField(default=False, help_text='readonly_mode')),
                ('contest_photo', django_resized.forms.ResizedImageField(crop=None, default='wirdLogo.png', force_format=None, keep_meta=True, quality=-1, scale=None, size=[500, 500], upload_to=core.models.upload_location)),
                ('days_to_record_in_past', models.PositiveSmallIntegerField(default=1, help_text='if zero then disabled')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('profile_photo', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format=None, keep_meta=True, quality=-1, scale=None, size=[500, 500], upload_to=core.models.upload_location)),
                ('phone_number', models.CharField(blank=True, default='0000000000', max_length=15, validators=[django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z'), code='invalid', message='Enter a valid integer.')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContestPerson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('contest_role', models.PositiveSmallIntegerField(choices=[(0, 'contest_owner'), (1, 'super_admin'), (2, 'admin'), (3, 'member'), (4, 'read_only_member'), (5, 'pending_member'), (6, 'deactivated')], default=3)),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.contest')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='contestperson',
            constraint=models.UniqueConstraint(fields=('contest_id', 'person_id'), name='unique_contest_person', violation_error_message='person exists in contest'),
        ),
    ]
